/*
 * Fixed SAI APIs which are not based on P4 pipeline code.
 * Just sufficient to support testing & integrating bmv2's libsai.
 */
#include "utils.h"
#include "saiimpl.h"
#include "config.h"

#include <vector>

std::shared_ptr<dash::DashSai> dashSai = std::make_shared<dash::DashSai>();

static sai_status_t dash_sai_create_switch(
        _Out_ sai_object_id_t *switch_id,
        _In_ uint32_t attr_count,
        _In_ const sai_attribute_t *attr_list)
{
    DASH_LOG_ENTER();

    return dashSai->createSwitch(switch_id, attr_count, attr_list);
}

static sai_status_t dash_sai_get_switch_attribute(
        _In_ sai_object_id_t switch_id,
        _In_ uint32_t attr_count,
        _Inout_ sai_attribute_t *attr_list)
{
    DASH_LOG_ENTER();

    return dashSai->getSwitchAttribute(switch_id, attr_count, attr_list);
}

static sai_status_t dash_sai_remove_switch(
        _In_ sai_object_id_t switch_id)
{
    DASH_LOG_ENTER();

    return dashSai->removeSwitch(switch_id);
}

static sai_status_t dash_sai_set_switch_attribute(
        _In_ sai_object_id_t switch_id,
        _In_ const sai_attribute_t *attr)
{
    DASH_LOG_ENTER();

    return dashSai->setSwitchAttribute(switch_id, attr);
}

sai_switch_api_t dash_sai_switch_api_impl = {
    .create_switch = dash_sai_create_switch,
    .remove_switch = dash_sai_remove_switch,
    .set_switch_attribute = dash_sai_set_switch_attribute,
    .get_switch_attribute = dash_sai_get_switch_attribute,
    .get_switch_stats = 0,
    .get_switch_stats_ext = 0,
    .clear_switch_stats = 0,
    .switch_mdio_read = 0,
    .switch_mdio_write = 0,
    .create_switch_tunnel = 0,
    .remove_switch_tunnel = 0,
    .set_switch_tunnel_attribute = 0,
    .get_switch_tunnel_attribute = 0,
    .switch_mdio_cl22_read = 0,
    .switch_mdio_cl22_write = 0,
};

static sai_status_t dash_sai_get_port_attribute(
        _In_ sai_object_id_t port_id,
        _In_ uint32_t attr_count,
        _Inout_ sai_attribute_t *attr_list)
{
    DASH_LOG_ENTER();

    return dashSai->getPortAttribute(port_id, attr_count, attr_list);
}

sai_port_api_t dash_sai_port_api_impl = {
    .create_port = 0,
    .remove_port = 0,
    .set_port_attribute = 0,
    .get_port_attribute = dash_sai_get_port_attribute,
    .get_port_stats = 0,
    .get_port_stats_ext = 0,
    .clear_port_stats = 0,
    .clear_port_all_stats = 0,
    .create_port_pool = 0,
    .remove_port_pool = 0,
    .set_port_pool_attribute = 0,
    .get_port_pool_attribute = 0,
    .get_port_pool_stats = 0,
    .get_port_pool_stats_ext = 0,
    .clear_port_pool_stats = 0,
    .create_port_connector = 0,
    .remove_port_connector = 0,
    .set_port_connector_attribute = 0,
    .get_port_connector_attribute = 0,
    .create_port_serdes = 0,
    .remove_port_serdes = 0,
    .set_port_serdes_attribute = 0,
    .get_port_serdes_attribute = 0,
    .create_ports = 0,
    .remove_ports = 0,
    .set_ports_attribute = 0,
    .get_ports_attribute = 0
};

sai_status_t sai_api_query(
        _In_ sai_api_t api,
        _Out_ void **api_method_table)
{
    DASH_LOG_ENTER();

    switch((int)api) {
        case SAI_API_SWITCH:
            *api_method_table = (void *)&dash_sai_switch_api_impl;
            break;

        case SAI_API_PORT:
            *api_method_table = (void *)&dash_sai_port_api_impl;
            break;

{% for api in api_names %}
        case SAI_API_{{ api | upper }}:
            *api_method_table = (void *)&dash_sai_{{ api }}_api_impl;
            break;

{% endfor %}
        default:

            DASH_LOG_WARN("api %d not supported", api);

            return SAI_STATUS_NOT_SUPPORTED;
    }

    return SAI_STATUS_SUCCESS;
}

sai_status_t sai_object_type_get_availability(
        _In_ sai_object_id_t switch_id,
        _In_ sai_object_type_t object_type,
        _In_ uint32_t attr_count,
        _In_ const sai_attribute_t *attr_list,
        _Out_ uint64_t *count)
{
    DASH_LOG_ENTER();

    DASH_LOG_WARN("not implemented");

    return SAI_STATUS_NOT_IMPLEMENTED;
}

sai_object_type_t sai_object_type_query(
        _In_ sai_object_id_t object_id)
{
    DASH_LOG_ENTER();

    return dashSai->objectTypeQuery(object_id);
}

sai_object_id_t sai_switch_id_query(
        _In_ sai_object_id_t object_id)
{
    DASH_LOG_ENTER();

    return dashSai->switchIdQuery(object_id);
}

sai_status_t sai_query_attribute_enum_values_capability(
        _In_ sai_object_id_t switch_id,
        _In_ sai_object_type_t object_type,
        _In_ sai_attr_id_t attr_id,
        _Inout_ sai_s32_list_t *enum_values_capability)
{
    DASH_LOG_ENTER();

    DASH_LOG_WARN("not implemented");

    return SAI_STATUS_NOT_IMPLEMENTED;
}

sai_status_t sai_api_initialize(
        _In_ uint64_t flags,
        _In_ const sai_service_method_table_t *services)
{
    DASH_LOG_ENTER();

    return dashSai->apiInitialize(flags, services);
}

sai_status_t sai_api_uninitialize(void)
{
    DASH_LOG_ENTER();

    return dashSai->apiUninitialize();
}

sai_status_t sai_log_set(
        _In_ sai_api_t api,
        _In_ sai_log_level_t log_level)
{
    DASH_LOG_ENTER();

    return SAI_STATUS_SUCCESS;
}

sai_status_t sai_query_api_version(
        _Out_ sai_api_version_t *version)
{
    DASH_LOG_ENTER();

    if (version)
    {
        *version = SAI_API_VERSION;

        DASH_LOG_NOTICE("SAI headers version: %d", SAI_API_VERSION);

        return SAI_STATUS_SUCCESS;
    }

    DASH_LOG_ERROR("version parameter is NULL");

    return SAI_STATUS_INVALID_PARAMETER;
}

sai_status_t sai_query_stats_capability(
        _In_ sai_object_id_t switch_id,
        _In_ sai_object_type_t object_type,
        _Inout_ sai_stat_capability_list_t *stats_capability)
{
    DASH_LOG_ENTER();

    DASH_LOG_WARN("not implemented");

    return SAI_STATUS_NOT_IMPLEMENTED;
}

sai_status_t sai_query_attribute_capability(
        _In_ sai_object_id_t switch_id,
        _In_ sai_object_type_t object_type,
        _In_ sai_attr_id_t attr_id,
        _Out_ sai_attr_capability_t *attr_capability)
{
    DASH_LOG_ENTER();

    DASH_LOG_WARN("not implemented");

    return SAI_STATUS_NOT_IMPLEMENTED;
}

sai_status_t sai_dbg_generate_dump(
        _In_ const char *dump_file_name)
{
    DASH_LOG_ENTER();

    DASH_LOG_WARN("not implemented");

    return SAI_STATUS_NOT_IMPLEMENTED;
}
